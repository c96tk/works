このプログラムについて

設定ファイルの条件を満たし、最も支払賃金・交通費が少なくなる組み合わせを出力します。

設定ファイルについて
setting.csv
１列目にシフトパターンと各シフトパターンに最低限必要な人数（平日・祝祭日）を設定します。
また、各シフトパターンに対応する希望シフトパターンが複数あることも想定しています。
例えば、午前・午後・通しと3パターンのシフトがあったとき、
希望シフトが通しだった場合は午前でも午後でも通しでも割り当てることができます。
その場合午前に対応する希望シフトは午前・通しとなります。
各シフトパターンと同じ数の列数を追加し、各シフトパターンに対応する希望シフトがあれば1を
対応しない場合は0を入力します。（詳しくは初期データを見れば簡単にわかります）

condition.csv
各スタッフと対応する時給・交通費・スキル・最大出勤数・最小出勤数・休日数を設定します。
スキルは指導できる人が1、一人で問題なく仕事ができる人を0、サポートが必要な人を-1としています。
指導できる人とサポートが必要な人が必ず一緒になるようにシフトを組みます。
最大出勤数・最小出勤数・休日数については必ず設定しなくても動きますが、
賃金最小化を目的にしているため、少なくとも最小出勤数を設定しないと極端に少なくなる場合があります。

submit.csv
各スタッフから提出されたシフトをまとめたファイルです。
日付（行インデックス）とスタッフ（列インデックス）を入力します。
また希望シフトがsetting.csvと同じである必要があります。

ShiftProblem.ipynb
プログラム本体です。
JupyterNotebookやGoogleColaboratoryでの動作を想定しています。
最初にインポート文がありますが、もしライブラリのインストールが済んでいない場合、
先にpipコマンドなどでインストールしてください。
9行目のfole_pathには自信の環境にあったパスを入力してください。
ファイルパスはバックスラッシュで終わるように入力してください。
※Windowsの場合、フォルダの区切りを示すバックスラッシュが2つ必要です。
1つ目のプログラムは条件の設定と結果の出力を行います。
結果がOptimalと出れば問題を解あり、Infeasibleであれば解なしです。

2つ目のプログラムは結果の出力です。
最初に設定したパスにCSVファイルで結果出力します。
ファイル名はresult.csvです。